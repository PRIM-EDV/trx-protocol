// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v4.25.3
// source: trx.device.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";

export interface GetBatteryStatus {
  request?: GetBatteryStatus_Request | undefined;
  response?: GetBatteryStatus_Response | undefined;
  error?: string | undefined;
}

export interface GetBatteryStatus_Request {
}

export interface GetBatteryStatus_Response {
  batteryLevel: number;
}

export interface GetDeviceInfo {
  request?: GetDeviceInfo_Request | undefined;
  response?: GetDeviceInfo_Response | undefined;
  error?: string | undefined;
}

export interface GetDeviceInfo_Request {
}

export interface GetDeviceInfo_Response {
  deviceId: string;
  fwVersion: string;
}

function createBaseGetBatteryStatus(): GetBatteryStatus {
  return { request: undefined, response: undefined, error: undefined };
}

export const GetBatteryStatus = {
  encode(message: GetBatteryStatus, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.request !== undefined) {
      GetBatteryStatus_Request.encode(message.request, writer.uint32(10).fork()).ldelim();
    }
    if (message.response !== undefined) {
      GetBatteryStatus_Response.encode(message.response, writer.uint32(18).fork()).ldelim();
    }
    if (message.error !== undefined) {
      writer.uint32(26).string(message.error);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetBatteryStatus {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBatteryStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.request = GetBatteryStatus_Request.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.response = GetBatteryStatus_Response.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.error = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBatteryStatus {
    return {
      request: isSet(object.request) ? GetBatteryStatus_Request.fromJSON(object.request) : undefined,
      response: isSet(object.response) ? GetBatteryStatus_Response.fromJSON(object.response) : undefined,
      error: isSet(object.error) ? globalThis.String(object.error) : undefined,
    };
  },

  toJSON(message: GetBatteryStatus): unknown {
    const obj: any = {};
    if (message.request !== undefined) {
      obj.request = GetBatteryStatus_Request.toJSON(message.request);
    }
    if (message.response !== undefined) {
      obj.response = GetBatteryStatus_Response.toJSON(message.response);
    }
    if (message.error !== undefined) {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetBatteryStatus>, I>>(base?: I): GetBatteryStatus {
    return GetBatteryStatus.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetBatteryStatus>, I>>(object: I): GetBatteryStatus {
    const message = createBaseGetBatteryStatus();
    message.request = (object.request !== undefined && object.request !== null)
      ? GetBatteryStatus_Request.fromPartial(object.request)
      : undefined;
    message.response = (object.response !== undefined && object.response !== null)
      ? GetBatteryStatus_Response.fromPartial(object.response)
      : undefined;
    message.error = object.error ?? undefined;
    return message;
  },
};

function createBaseGetBatteryStatus_Request(): GetBatteryStatus_Request {
  return {};
}

export const GetBatteryStatus_Request = {
  encode(_: GetBatteryStatus_Request, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetBatteryStatus_Request {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBatteryStatus_Request();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetBatteryStatus_Request {
    return {};
  },

  toJSON(_: GetBatteryStatus_Request): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetBatteryStatus_Request>, I>>(base?: I): GetBatteryStatus_Request {
    return GetBatteryStatus_Request.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetBatteryStatus_Request>, I>>(_: I): GetBatteryStatus_Request {
    const message = createBaseGetBatteryStatus_Request();
    return message;
  },
};

function createBaseGetBatteryStatus_Response(): GetBatteryStatus_Response {
  return { batteryLevel: 0 };
}

export const GetBatteryStatus_Response = {
  encode(message: GetBatteryStatus_Response, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.batteryLevel !== 0) {
      writer.uint32(8).int32(message.batteryLevel);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetBatteryStatus_Response {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBatteryStatus_Response();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.batteryLevel = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBatteryStatus_Response {
    return { batteryLevel: isSet(object.batteryLevel) ? globalThis.Number(object.batteryLevel) : 0 };
  },

  toJSON(message: GetBatteryStatus_Response): unknown {
    const obj: any = {};
    if (message.batteryLevel !== 0) {
      obj.batteryLevel = Math.round(message.batteryLevel);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetBatteryStatus_Response>, I>>(base?: I): GetBatteryStatus_Response {
    return GetBatteryStatus_Response.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetBatteryStatus_Response>, I>>(object: I): GetBatteryStatus_Response {
    const message = createBaseGetBatteryStatus_Response();
    message.batteryLevel = object.batteryLevel ?? 0;
    return message;
  },
};

function createBaseGetDeviceInfo(): GetDeviceInfo {
  return { request: undefined, response: undefined, error: undefined };
}

export const GetDeviceInfo = {
  encode(message: GetDeviceInfo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.request !== undefined) {
      GetDeviceInfo_Request.encode(message.request, writer.uint32(10).fork()).ldelim();
    }
    if (message.response !== undefined) {
      GetDeviceInfo_Response.encode(message.response, writer.uint32(18).fork()).ldelim();
    }
    if (message.error !== undefined) {
      writer.uint32(26).string(message.error);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDeviceInfo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDeviceInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.request = GetDeviceInfo_Request.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.response = GetDeviceInfo_Response.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.error = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDeviceInfo {
    return {
      request: isSet(object.request) ? GetDeviceInfo_Request.fromJSON(object.request) : undefined,
      response: isSet(object.response) ? GetDeviceInfo_Response.fromJSON(object.response) : undefined,
      error: isSet(object.error) ? globalThis.String(object.error) : undefined,
    };
  },

  toJSON(message: GetDeviceInfo): unknown {
    const obj: any = {};
    if (message.request !== undefined) {
      obj.request = GetDeviceInfo_Request.toJSON(message.request);
    }
    if (message.response !== undefined) {
      obj.response = GetDeviceInfo_Response.toJSON(message.response);
    }
    if (message.error !== undefined) {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDeviceInfo>, I>>(base?: I): GetDeviceInfo {
    return GetDeviceInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDeviceInfo>, I>>(object: I): GetDeviceInfo {
    const message = createBaseGetDeviceInfo();
    message.request = (object.request !== undefined && object.request !== null)
      ? GetDeviceInfo_Request.fromPartial(object.request)
      : undefined;
    message.response = (object.response !== undefined && object.response !== null)
      ? GetDeviceInfo_Response.fromPartial(object.response)
      : undefined;
    message.error = object.error ?? undefined;
    return message;
  },
};

function createBaseGetDeviceInfo_Request(): GetDeviceInfo_Request {
  return {};
}

export const GetDeviceInfo_Request = {
  encode(_: GetDeviceInfo_Request, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDeviceInfo_Request {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDeviceInfo_Request();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetDeviceInfo_Request {
    return {};
  },

  toJSON(_: GetDeviceInfo_Request): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDeviceInfo_Request>, I>>(base?: I): GetDeviceInfo_Request {
    return GetDeviceInfo_Request.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDeviceInfo_Request>, I>>(_: I): GetDeviceInfo_Request {
    const message = createBaseGetDeviceInfo_Request();
    return message;
  },
};

function createBaseGetDeviceInfo_Response(): GetDeviceInfo_Response {
  return { deviceId: "", fwVersion: "" };
}

export const GetDeviceInfo_Response = {
  encode(message: GetDeviceInfo_Response, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.deviceId !== "") {
      writer.uint32(10).string(message.deviceId);
    }
    if (message.fwVersion !== "") {
      writer.uint32(18).string(message.fwVersion);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDeviceInfo_Response {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDeviceInfo_Response();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.deviceId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.fwVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDeviceInfo_Response {
    return {
      deviceId: isSet(object.deviceId) ? globalThis.String(object.deviceId) : "",
      fwVersion: isSet(object.fwVersion) ? globalThis.String(object.fwVersion) : "",
    };
  },

  toJSON(message: GetDeviceInfo_Response): unknown {
    const obj: any = {};
    if (message.deviceId !== "") {
      obj.deviceId = message.deviceId;
    }
    if (message.fwVersion !== "") {
      obj.fwVersion = message.fwVersion;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDeviceInfo_Response>, I>>(base?: I): GetDeviceInfo_Response {
    return GetDeviceInfo_Response.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDeviceInfo_Response>, I>>(object: I): GetDeviceInfo_Response {
    const message = createBaseGetDeviceInfo_Response();
    message.deviceId = object.deviceId ?? "";
    message.fwVersion = object.fwVersion ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
